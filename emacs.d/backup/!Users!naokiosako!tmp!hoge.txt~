`timescale 1ns/1ns

module PE1 #(
  parameter const_w0 = 32'hA453870,
            const_w1 = 32'h55331B8,
            const_w2 = 256'hF195B90,
            const_w3 = 256'hB6AE910,
            const_w4 = 256'hCB15C78,
            const_w5 = 256'h19F8712,
            const_th0 = var,
            const_th1 = var,
            const_th2 = var,
            const_th3 = var,
            const_th4 = var,
            const_th5 = var
)(
    input wire        CLK, RST_X,
    input wire        in_acc,
    input wire        in_x,   //入力
    inout wire  [2:0] in_m,   //枚数
    input wire  [4:0] in_a,   //アドレス
    output wire       out_y   //計算結果
  );

  reg       reg_s_up;
  reg [3:0] reg_s_down;
  initial reg_s_up <= 0;
  initial reg_s_down <= 0;

  wire wire_p_up;
  wire wire_p_down;
  wire       wire_s_up;
  wire [3:0] wire_s_down;
  wire LSB_up;
  wire LSB_down;
  wire rs_x;

  wire [31:0] const_w;
  wire [4:0]  const_th;

  assign const_w =  (in_m==0) ? const_w0
                  : (in_m==1) ? const_w1
                  : (in_m==2) ? const_w2
                  : (in_m==3) ? const_w3
                  : (in_m==4) ? const_w4
                  : (in_m==5) ? const_w5
                  : 0;

  assign const_th = (in_m==0) ? const_th0
                  : (in_m==1) ? const_th1
                  : (in_m==2) ? const_th2
                  : (in_m==3) ? const_th3
                  : (in_m==4) ? const_th4
                  : (in_m==5) ? const_th5
                  : 0;


  assign wire_p_down = const_w[in_a] ~^ in_x;
  assign rs_x   = ~( ( in_a==0 ) | ( RST_X==0 ) );

  assign LSB_up   = 1'b1;
  assign LSB_down = binary_select4(reg_s_down);

  assign wire_s_down = (wire_p_down) ? {reg_s_down[2:0], LSB_down} : reg_s_down;
  assign wire_s_up = ( wire_p_down && (reg_s_down==4'b1000) ) ? LSB_up : reg_s_up;

  assign out_y  = output_control(wire_s_up, wire_s_down, const_th);

  always@(posedge CLK or negedge rs_x) begin
    if( !rs_x ) begin
      reg_s_down <= 0;
      reg_s_up   <= 0;
    end
    else begin
      if(in_acc) begin
        reg_s_down <= wire_s_down;
        reg_s_up <= wire_s_up;
      end
    end
  end

  function binary_select4(
    input [3:0] in
  );
    begin
      case(in)
        4'b0000 : binary_select4 = 1'b1;
        4'b0100 : binary_select4 = 1'b1;
        4'b1001 : binary_select4 = 1'b1;
        4'b0110 : binary_select4 = 1'b1;
        4'b1010 : binary_select4 = 1'b1;
        4'b0101 : binary_select4 = 1'b1;
        4'b1011 : binary_select4 = 1'b1;
        4'b0111 : binary_select4 = 1'b1;
        default : binary_select4 = 1'b0;
      endcase
    end
  endfunction

  function output_control_sub(
    input [2:0] in,
    input [4:0] in_th
  );
    begin
      case(in)
        1'b0 : output_control_sub = (in_th <=  16);
        1'b1 : output_control_sub = (in_th <=  32);
        default  : output_control_sub = 1'b0;
      endcase
    end
  endfunction

  function output_control_sub_sub(
    input [2:0] in,
    input [4:0] in_th
  );
    begin
      case(in)
        1'b0 : output_control_sub_sub = (in_th/16 ==  0);
        1'b1 : output_control_sub_sub = (in_th/16 ==  1);
        default  : output_control_sub_sub = 1'b0;
      endcase
    end
  endfunction

  function output_control(
    input [4:0] in_up,
    input [3:0] in_down,
    input [4:0] in_th
  );
    begin
      if(output_control_sub(in_up, in_th)) begin
        if(output_control_sub_sub(in_up, in_th)) begin
          case(in_down)
            4'b0000 : output_control = ( (in_th%16) <=  0);
            4'b0001 : output_control = ( (in_th%16) <=  1);
            4'b0010 : output_control = ( (in_th%16) <=  2);
            4'b0100 : output_control = ( (in_th%16) <=  3);
            4'b1001 : output_control = ( (in_th%16) <=  4);
            4'b0011 : output_control = ( (in_th%16) <=  5);
            4'b0110 : output_control = ( (in_th%16) <=  6);
            4'b1101 : output_control = ( (in_th%16) <=  7);
            4'b1010 : output_control = ( (in_th%16) <=  8);
            4'b0101 : output_control = ( (in_th%16) <=  9);
            4'b1011 : output_control = ( (in_th%16) <= 10);
            4'b0111 : output_control = ( (in_th%16) <= 11);
            4'b1111 : output_control = ( (in_th%16) <= 12);
            4'b1110 : output_control = ( (in_th%16) <= 13);
            4'b1100 : output_control = ( (in_th%16) <= 14);
            4'b1000 : output_control = ( (in_th%16) <= 15);
            default  : output_control = 1'b0;
          endcase
        end else begin
          output_control = 1'b1;
        end
      end else begin
        output_control = 1'b0;
      end
    end
  endfunction
  
endmodule
